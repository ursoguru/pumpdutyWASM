@page "/bas"
@inject HttpClient Http
@using System;
@using System.Collections.Generic;
@using System.Xml.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading;

<PageTitle>Basic Calculator</PageTitle>


<div class="container text-left">
    <div class="row">
        <div class="col-md-6">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Basic Pump Duty:</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <table class="table">

                                <tbody>

                                    <tr>
                                        <th>Pipe Type</th>
                                        <td>
                                            <select class="form-control" value="@pumpSelections.pipeType" @onchange="@OnSelectpipeType" style="width:200px">
                                                @foreach (var pipeType in pipeTypes)
                                                {
                                                    <option value=@pipeType>@pipeType</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>Pipe ID (mm)</th>
                                        <td>
                                            <div class="input-group mb-3" style="width:200px">

                                                <input type="number" step=1 class="form-control" value="@pumpSelections.pipewidth" @onchange="@OnEditPipeWidth">

                                            </div>
                                            <p style="color:red"><small>@pipewidtherror</small></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>Pipe length (m)</th>
                                        <td>
                                            <div class="input-group mb-3" style="width:200px">

                                                <input type="number" step=1 class="form-control" value="@pumpSelections.pipelength" @onchange="@OnEditPipeLength">

                                            </div>
                                            <p style="color:red"><small>@pipelengtherror</small></p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>Required flow (m³/h)</th>
                                        <td>
                                            <div class="input-group mb-3" style="width:200px">

                                                <input type="number" step=1 class="form-control" value="@pumpSelections.flow" @onchange="@OnEditflow">

                                            </div>
                                            <p style="color:red"><small>@flowerror</small></p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <th>Static head (m)</th>
                                        <td>
                                            <div class="input-group mb-3" style="width:200px">

                                                <input type="number" step=1 class="form-control" value="@pumpSelections.lift" @onchange="@OnEditlift">

                                            </div>
                                            <p style="color:red"><small>@lifterror</small></p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <th>Required Pressure (Bar)</th>
                                        <td>
                                            <div class="input-group mb-3" style="width:200px">

                                                <input type="number" step=1 class="form-control" value="@pumpSelections.bar" @onchange="@OnEditbar">

                                            </div>
                                            <p style="color:red"><small>@barerror</small></p>
                                        </td>
                                    </tr>

                                </tbody>
                            </table>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-md-6 text-left">
            <div class="d-none d-md-block">
                <div class="box2"></div>


            </div>
            <div>
                <table class="table">
                    @if (pumpDuty.velocity > 2.8F)
                    {
                        <tbody style="color:red">
                            <tr>
                                <th>
                                    Flow Velocity (m/s)

                                    <p><small>Do not exceed 2.8m/s - Increase Pipe NB</small></p>

                                </th>
                                <td>
                                    @pumpDuty.velocity

                                </td>

                            </tr>
                        </tbody>
                    }
                    else
                    {
                        <tbody style="color:green">
                            <tr>
                                <th>
                                    Flow Velocity (m/s)

                                    <p><small> </small></p>

                                </th>
                                <td>
                                    @pumpDuty.velocity

                                </td>

                            </tr>
                        </tbody>
                    }


                </table>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Total Pump Duty:</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <table class="table">

                                    <tbody>

                                        <tr>
                                            <th>Total Required flow (m³/h)</th>
                                            <td>
                                                @pumpDuty.flow
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Total Dynamic Head (m)</th>
                                            <td>
                                                @pumpDuty.head
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
           




            </div>


        </div>

    </div>
</div>





@code {

    
    protected override void OnInitialized()
   
    {
        calculateDuty();
    }



    public string lifterror = "";
    public string barerror = "";
    public string flowerror = "";
    public string pipelengtherror = "";
    public string pipewidtherror = "";



    List<string> pipeTypes = new List<string>() { "Steel Pipe (New)", "Steel Pipe (Old)", "UPVC Pipe", "Asbestos cement"};


    private int currentCount = 0;

    struct PumpDuty
    {
        public float flow;
        public float head;
        public float velocity;
    }

    PumpDuty pumpDuty = new PumpDuty();


    struct PumpSelections
    {

        public string pipeType;
        public float lift;
        public float pipewidth;
        public float pipelength;
        public float flow;
        public float bar;

        public PumpSelections(string pipeTypeSystem, float pipeW, float pipeL, float pipeLift, float pipeFlow, float pipeBar)
        {
            pipeType = pipeTypeSystem;
            pipelength = pipeL;
            pipewidth = pipeW;
            lift = pipeLift;
            flow = pipeFlow;
            bar = pipeBar;

        }
    }












    PumpSelections pumpSelections = new PumpSelections("Steel Pipe (New)", 40.0F, 70.0F, 5, 5,3);



    public void calculateDuty()
    {
        calculateFlowHead();

        void calculateFlowHead()
        {

            float B17;
            float B18;
            float B19;
            float B20;
            float B30 = 0.0F;

            switch (pumpSelections.pipeType) 
            {
                case "Steel Pipe (New)":
                    B30 = 130.0F;
                    break;
                case "Steel Pipe (Old)":
                    B30 = 110.0F;
                    break;
                case "UPVC Pipe":
                case "Asbestos cement":
                    B30 = 140.0F;
                    break;
                default:
                    break;
            }

            pumpDuty.flow = pumpSelections.flow; 

            B17 = pumpSelections.flow / 3.6F;
            B18 = B17 / 1.0F;
            B19 = pumpSelections.pipelength * (float)Math.Pow((B17 / (3.5888F * (float)Math.Pow(10, -6) * B30 * ((float)Math.Pow(pumpSelections.pipewidth, 2.63)))), 1.85);
            B20 = (pumpSelections.bar * 10) + pumpSelections.lift;
            pumpDuty.head = B19 + B20; 

#if DEBUG

            Console.WriteLine("B17 " + B17);
            Console.WriteLine("B19 " + B19);
            Console.WriteLine("B20 " + B20);

#endif

            pumpDuty.velocity = B17 * 1000.0F / (3.142F / 4.0F * (float)Math.Pow(pumpSelections.pipewidth, 2)); //sub
        }


    }




    void OnSelectpipeType(ChangeEventArgs e)
    {
        pumpSelections.pipeType = e.Value.ToString();
        calculateDuty();
    }

    void OnEditlift(ChangeEventArgs e)
    {
        try { pumpSelections.lift = float.Parse(e.Value.ToString()); lifterror = ""; }
        catch { lifterror = "ERROR: This value used to be " + pumpSelections.lift.ToString() + ".Please fix"; }
        calculateDuty();
    }
    void OnEditbar(ChangeEventArgs e)
    {
        try { pumpSelections.bar = float.Parse(e.Value.ToString()); barerror = ""; }
        catch { barerror = "ERROR: This value used to be " + pumpSelections.bar.ToString() + ".Please fix"; }
        calculateDuty();
    }
    void OnEditflow(ChangeEventArgs e)
    {
        try { pumpSelections.flow = float.Parse(e.Value.ToString()); flowerror = ""; }
        catch { flowerror = "ERROR: This value used to be " + pumpSelections.lift.ToString() + ".Please fix"; }
        calculateDuty();
    }
    void OnEditPipeLength(ChangeEventArgs e)
    {
        try { pumpSelections.pipelength = float.Parse(e.Value.ToString()); pipelengtherror = ""; }
        catch { pipelengtherror = "ERROR: This value used to be " + pumpSelections.pipelength.ToString() + ". Please fix"; }
        calculateDuty();
    }
    void OnEditPipeWidth(ChangeEventArgs e)
    {
        try { pumpSelections.pipewidth = float.Parse(e.Value.ToString()); pipewidtherror = ""; }
        catch { pipewidtherror = "ERROR: This value used to be " + pumpSelections.pipewidth.ToString() + ".Please fix"; }
        calculateDuty();
    }



}






